{"version":3,"sources":["books.js","App.js","serviceWorker.js","index.js"],"names":["Desc","_ref2","description","react_default","a","createElement","className","Books","_ref","title","subtitle","author","page","src","alt","App","state","_getBooks","_callee","books","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","this","fetch","then","response","json","catch","err","console","log","_renderMovies","src_books_0","publish_date","cover","large","authors","name","number_of_pages","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAgBA,SAASA,EAATC,GAA4B,IAAbC,EAAaD,EAAbC,YACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,2BAAmBH,IAgBhBK,MA/Bf,SAAAC,GAAyD,IAAzCC,EAAyCD,EAAzCC,MAAMC,EAAmCF,EAAnCE,SAASC,EAA0BH,EAA1BG,OAAOC,EAAmBJ,EAAnBI,KAAMV,EAAaM,EAAbN,YACxC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,oBAAYI,GACZN,EAAAC,EAAAC,cAAA,OAAKQ,IAAKH,EAAUI,IAAI,KACxBX,EAAAC,EAAAC,cAAA,qBAAaM,GACbR,EAAAC,EAAAC,cAAA,oBAAYO,GACZT,EAAAC,EAAAC,cAACL,EAAD,CAAME,YAAeA,MCsClBa,6MA3CbC,MAAQ,KAQRC,+BAAY,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAhB,EAAAiB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACJP,EADIG,EAAAK,KAEVF,EAAKG,SAAS,CACVT,UAHM,wBAAAG,EAAAO,SAAAX,EAAAY,WAOZJ,SAAW,WACP,OAAOK,MAAM,uFACRC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAK,wBAClBC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAGlCG,cAAgB,WAAM,IAEbpB,EAASM,EAAKT,MAAdG,MACD,OAAOhB,EAAAC,EAAAC,cAACmC,EAAD,CACHtC,YAAaiB,EAAMsB,aACnBhC,MAAOU,EAAMV,MACbC,SAAUS,EAAMuB,MAAMC,MACtBhC,OAAQQ,EAAMyB,QAAQ,GAAGC,KACzBjC,KAAMO,EAAM2B,sGAzBtBhB,KAAKb,6CA8BL,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVwB,KAAKd,MAAMG,MAAQW,KAAKS,gBAAkB,kBAvCnCQ,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.60648343.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport './books.css';\n\nfunction Books({title,subtitle,author,page, description}){\n    return (\n        <div className=\"books\">\n            <p>title : {title}</p>\n            <img src={subtitle} alt=\"\"/>\n            <p>author : {author}</p>\n            <p>pages : {page}</p>\n            <Desc description = {description}/>\n        </div>\n    )\n}\n\nfunction Desc({description}){\n    return (\n        <div className=\"desc\">\n            <p>publish_date : {description}</p>\n        </div>\n    )\n}\n\nDesc.propTypes = {\n    description : PropTypes.string.isRequired\n}\n\nBooks.propTypes = {\n    title : PropTypes.string.isRequired,\n    subtitle : PropTypes.string.isRequired,\n    author : PropTypes.string.isRequired,\n    page : PropTypes.number.isRequired,\n};\n\nexport default Books;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Books from './books';\n\nclass App extends Component {\n\n  state = {\n\n  };\n\n  componentDidMount(){\n    this._getBooks();\n  }\n\n  _getBooks = async () => {\n    const books = await this._callApi();\n    this.setState({\n        books\n      });\n  };\n\n  _callApi = () => {\n      return fetch('https://openlibrary.org/api/books?bibkeys=ISBN:9780980200447&jscmd=data&format=json')\n          .then(response => response.json())\n          .then(json => json[\"ISBN:9780980200447\"] )\n          .catch(err => console.log(err))\n  };\n\n  _renderMovies = () => {\n\n    const {books} = this.state;\n          return <Books\n              description={books.publish_date}\n              title={books.title}\n              subtitle={books.cover.large}\n              author={books.authors[0].name}\n              page={books.number_of_pages}\n          />\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n          {this.state.books ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}